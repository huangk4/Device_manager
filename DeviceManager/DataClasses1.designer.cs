#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeviceManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DeviceManager")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertWarehouse(Warehouse instance);
    partial void UpdateWarehouse(Warehouse instance);
    partial void DeleteWarehouse(Warehouse instance);
    partial void InsertAuthority(Authority instance);
    partial void UpdateAuthority(Authority instance);
    partial void DeleteAuthority(Authority instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDevice(Device instance);
    partial void UpdateDevice(Device instance);
    partial void DeleteDevice(Device instance);
    partial void InsertGodownEntry(GodownEntry instance);
    partial void UpdateGodownEntry(GodownEntry instance);
    partial void DeleteGodownEntry(GodownEntry instance);
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
    partial void DeleteRequirement(Requirement instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRole2Auth(Role2Auth instance);
    partial void UpdateRole2Auth(Role2Auth instance);
    partial void DeleteRole2Auth(Role2Auth instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertUser2Role(User2Role instance);
    partial void UpdateUser2Role(User2Role instance);
    partial void DeleteUser2Role(User2Role instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertBulletin(Bulletin instance);
    partial void UpdateBulletin(Bulletin instance);
    partial void DeleteBulletin(Bulletin instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DeviceManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admin
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Warehouse> Warehouse
		{
			get
			{
				return this.GetTable<Warehouse>();
			}
		}
		
		public System.Data.Linq.Table<Authority> Authority
		{
			get
			{
				return this.GetTable<Authority>();
			}
		}
		
		public System.Data.Linq.Table<Department> Department
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Device> Device
		{
			get
			{
				return this.GetTable<Device>();
			}
		}
		
		public System.Data.Linq.Table<GodownEntry> GodownEntry
		{
			get
			{
				return this.GetTable<GodownEntry>();
			}
		}
		
		public System.Data.Linq.Table<Requirement> Requirement
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Role2Auth> Role2Auth
		{
			get
			{
				return this.GetTable<Role2Auth>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Supplier
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<User2Role> User2Role
		{
			get
			{
				return this.GetTable<User2Role>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contract
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<SetOrder> SetOrder
		{
			get
			{
				return this.GetTable<SetOrder>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderCount> OrderCount
		{
			get
			{
				return this.GetTable<OrderCount>();
			}
		}
		
		public System.Data.Linq.Table<GodownEntryCount> GodownEntryCount
		{
			get
			{
				return this.GetTable<GodownEntryCount>();
			}
		}
		
		public System.Data.Linq.Table<Bulletin> Bulletin
		{
			get
			{
				return this.GetTable<Bulletin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _用户名;
		
		private string _密码;
		
		private string _所属部门;
		
		private string _姓名;
		
		private string _联系方式;
		
		private string _职位;
		
		private EntitySet<User2Role> _User2Role;
		
		private EntityRef<Department> _Department;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On用户名Changing(string value);
    partial void On用户名Changed();
    partial void On密码Changing(string value);
    partial void On密码Changed();
    partial void On所属部门Changing(string value);
    partial void On所属部门Changed();
    partial void On姓名Changing(string value);
    partial void On姓名Changed();
    partial void On联系方式Changing(string value);
    partial void On联系方式Changed();
    partial void On职位Changing(string value);
    partial void On职位Changed();
    #endregion
		
		public Admin()
		{
			this._User2Role = new EntitySet<User2Role>(new Action<User2Role>(this.attach_User2Role), new Action<User2Role>(this.detach_User2Role));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用户名", DbType="VarChar(255)")]
		public string 用户名
		{
			get
			{
				return this._用户名;
			}
			set
			{
				if ((this._用户名 != value))
				{
					this.On用户名Changing(value);
					this.SendPropertyChanging();
					this._用户名 = value;
					this.SendPropertyChanged("用户名");
					this.On用户名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_密码", DbType="VarChar(255)")]
		public string 密码
		{
			get
			{
				return this._密码;
			}
			set
			{
				if ((this._密码 != value))
				{
					this.On密码Changing(value);
					this.SendPropertyChanging();
					this._密码 = value;
					this.SendPropertyChanged("密码");
					this.On密码Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所属部门", DbType="VarChar(255)")]
		public string 所属部门
		{
			get
			{
				return this._所属部门;
			}
			set
			{
				if ((this._所属部门 != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On所属部门Changing(value);
					this.SendPropertyChanging();
					this._所属部门 = value;
					this.SendPropertyChanged("所属部门");
					this.On所属部门Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="VarChar(255)")]
		public string 姓名
		{
			get
			{
				return this._姓名;
			}
			set
			{
				if ((this._姓名 != value))
				{
					this.On姓名Changing(value);
					this.SendPropertyChanging();
					this._姓名 = value;
					this.SendPropertyChanged("姓名");
					this.On姓名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_联系方式", DbType="VarChar(255)")]
		public string 联系方式
		{
			get
			{
				return this._联系方式;
			}
			set
			{
				if ((this._联系方式 != value))
				{
					this.On联系方式Changing(value);
					this.SendPropertyChanging();
					this._联系方式 = value;
					this.SendPropertyChanged("联系方式");
					this.On联系方式Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_职位", DbType="VarChar(255)")]
		public string 职位
		{
			get
			{
				return this._职位;
			}
			set
			{
				if ((this._职位 != value))
				{
					this.On职位Changing(value);
					this.SendPropertyChanging();
					this._职位 = value;
					this.SendPropertyChanged("职位");
					this.On职位Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_User2Role", Storage="_User2Role", ThisKey="ID", OtherKey="userid")]
		public EntitySet<User2Role> User2Role
		{
			get
			{
				return this._User2Role;
			}
			set
			{
				this._User2Role.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Admin", Storage="_Department", ThisKey="所属部门", OtherKey="部门名称", IsForeignKey=true, DeleteRule="SET NULL")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Admin.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Admin.Add(this);
						this._所属部门 = value.部门名称;
					}
					else
					{
						this._所属部门 = default(string);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User2Role(User2Role entity)
		{
			this.SendPropertyChanging();
			entity.Admin = this;
		}
		
		private void detach_User2Role(User2Role entity)
		{
			this.SendPropertyChanging();
			entity.Admin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warehouse")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _仓库所属;
		
		private string _仓库名;
		
		private EntitySet<Device> _Device;
		
		private EntityRef<Department> _Department;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On仓库所属Changing(string value);
    partial void On仓库所属Changed();
    partial void On仓库名Changing(string value);
    partial void On仓库名Changed();
    #endregion
		
		public Warehouse()
		{
			this._Device = new EntitySet<Device>(new Action<Device>(this.attach_Device), new Action<Device>(this.detach_Device));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_仓库所属", DbType="VarChar(255)")]
		public string 仓库所属
		{
			get
			{
				return this._仓库所属;
			}
			set
			{
				if ((this._仓库所属 != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On仓库所属Changing(value);
					this.SendPropertyChanging();
					this._仓库所属 = value;
					this.SendPropertyChanged("仓库所属");
					this.On仓库所属Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_仓库名", DbType="VarChar(255)")]
		public string 仓库名
		{
			get
			{
				return this._仓库名;
			}
			set
			{
				if ((this._仓库名 != value))
				{
					this.On仓库名Changing(value);
					this.SendPropertyChanging();
					this._仓库名 = value;
					this.SendPropertyChanged("仓库名");
					this.On仓库名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_Device", Storage="_Device", ThisKey="仓库名", OtherKey="所属仓库")]
		public EntitySet<Device> Device
		{
			get
			{
				return this._Device;
			}
			set
			{
				this._Device.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Warehouse", Storage="_Department", ThisKey="仓库所属", OtherKey="部门名称", IsForeignKey=true, DeleteRule="SET NULL")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Warehouse.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Warehouse.Add(this);
						this._仓库所属 = value.部门名称;
					}
					else
					{
						this._仓库所属 = default(string);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Device(Device entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_Device(Device entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authority")]
	public partial class Authority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _权限;
		
		private EntitySet<Role2Auth> _Role2Auth;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On权限Changing(string value);
    partial void On权限Changed();
    #endregion
		
		public Authority()
		{
			this._Role2Auth = new EntitySet<Role2Auth>(new Action<Role2Auth>(this.attach_Role2Auth), new Action<Role2Auth>(this.detach_Role2Auth));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_权限", DbType="VarChar(255)")]
		public string 权限
		{
			get
			{
				return this._权限;
			}
			set
			{
				if ((this._权限 != value))
				{
					this.On权限Changing(value);
					this.SendPropertyChanging();
					this._权限 = value;
					this.SendPropertyChanged("权限");
					this.On权限Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authority_Role2Auth", Storage="_Role2Auth", ThisKey="ID", OtherKey="authid")]
		public EntitySet<Role2Auth> Role2Auth
		{
			get
			{
				return this._Role2Auth;
			}
			set
			{
				this._Role2Auth.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Role2Auth(Role2Auth entity)
		{
			this.SendPropertyChanging();
			entity.Authority = this;
		}
		
		private void detach_Role2Auth(Role2Auth entity)
		{
			this.SendPropertyChanging();
			entity.Authority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _部门名称;
		
		private string _部门库;
		
		private EntitySet<Admin> _Admin;
		
		private EntitySet<Warehouse> _Warehouse;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On部门名称Changing(string value);
    partial void On部门名称Changed();
    partial void On部门库Changing(string value);
    partial void On部门库Changed();
    #endregion
		
		public Department()
		{
			this._Admin = new EntitySet<Admin>(new Action<Admin>(this.attach_Admin), new Action<Admin>(this.detach_Admin));
			this._Warehouse = new EntitySet<Warehouse>(new Action<Warehouse>(this.attach_Warehouse), new Action<Warehouse>(this.detach_Warehouse));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_部门名称", DbType="VarChar(255)")]
		public string 部门名称
		{
			get
			{
				return this._部门名称;
			}
			set
			{
				if ((this._部门名称 != value))
				{
					this.On部门名称Changing(value);
					this.SendPropertyChanging();
					this._部门名称 = value;
					this.SendPropertyChanged("部门名称");
					this.On部门名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_部门库", DbType="VarChar(255)")]
		public string 部门库
		{
			get
			{
				return this._部门库;
			}
			set
			{
				if ((this._部门库 != value))
				{
					this.On部门库Changing(value);
					this.SendPropertyChanging();
					this._部门库 = value;
					this.SendPropertyChanged("部门库");
					this.On部门库Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Admin", Storage="_Admin", ThisKey="部门名称", OtherKey="所属部门")]
		public EntitySet<Admin> Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				this._Admin.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Warehouse", Storage="_Warehouse", ThisKey="部门名称", OtherKey="仓库所属")]
		public EntitySet<Warehouse> Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				this._Warehouse.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admin(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Admin(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Warehouse(Warehouse entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Warehouse(Warehouse entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Device")]
	public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _资产名称;
		
		private string _简称;
		
		private string _所属仓库;
		
		private System.Nullable<int> _存量;
		
		private string _是否耗材;
		
		private string _折旧状态;
		
		private string _借出状态;
		
		private string _借出信息;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On资产名称Changing(string value);
    partial void On资产名称Changed();
    partial void On简称Changing(string value);
    partial void On简称Changed();
    partial void On所属仓库Changing(string value);
    partial void On所属仓库Changed();
    partial void On存量Changing(System.Nullable<int> value);
    partial void On存量Changed();
    partial void On是否耗材Changing(string value);
    partial void On是否耗材Changed();
    partial void On折旧状态Changing(string value);
    partial void On折旧状态Changed();
    partial void On借出状态Changing(string value);
    partial void On借出状态Changed();
    partial void On借出信息Changing(string value);
    partial void On借出信息Changed();
    #endregion
		
		public Device()
		{
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_资产名称", DbType="VarChar(255)")]
		public string 资产名称
		{
			get
			{
				return this._资产名称;
			}
			set
			{
				if ((this._资产名称 != value))
				{
					this.On资产名称Changing(value);
					this.SendPropertyChanging();
					this._资产名称 = value;
					this.SendPropertyChanged("资产名称");
					this.On资产名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_简称", DbType="VarChar(255)")]
		public string 简称
		{
			get
			{
				return this._简称;
			}
			set
			{
				if ((this._简称 != value))
				{
					this.On简称Changing(value);
					this.SendPropertyChanging();
					this._简称 = value;
					this.SendPropertyChanged("简称");
					this.On简称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所属仓库", DbType="VarChar(255)")]
		public string 所属仓库
		{
			get
			{
				return this._所属仓库;
			}
			set
			{
				if ((this._所属仓库 != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On所属仓库Changing(value);
					this.SendPropertyChanging();
					this._所属仓库 = value;
					this.SendPropertyChanged("所属仓库");
					this.On所属仓库Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_存量", DbType="Int")]
		public System.Nullable<int> 存量
		{
			get
			{
				return this._存量;
			}
			set
			{
				if ((this._存量 != value))
				{
					this.On存量Changing(value);
					this.SendPropertyChanging();
					this._存量 = value;
					this.SendPropertyChanged("存量");
					this.On存量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否耗材", DbType="VarChar(255)")]
		public string 是否耗材
		{
			get
			{
				return this._是否耗材;
			}
			set
			{
				if ((this._是否耗材 != value))
				{
					this.On是否耗材Changing(value);
					this.SendPropertyChanging();
					this._是否耗材 = value;
					this.SendPropertyChanged("是否耗材");
					this.On是否耗材Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_折旧状态", DbType="VarChar(255)")]
		public string 折旧状态
		{
			get
			{
				return this._折旧状态;
			}
			set
			{
				if ((this._折旧状态 != value))
				{
					this.On折旧状态Changing(value);
					this.SendPropertyChanging();
					this._折旧状态 = value;
					this.SendPropertyChanged("折旧状态");
					this.On折旧状态Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_借出状态", DbType="VarChar(255)")]
		public string 借出状态
		{
			get
			{
				return this._借出状态;
			}
			set
			{
				if ((this._借出状态 != value))
				{
					this.On借出状态Changing(value);
					this.SendPropertyChanging();
					this._借出状态 = value;
					this.SendPropertyChanged("借出状态");
					this.On借出状态Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_借出信息", DbType="VarChar(255)")]
		public string 借出信息
		{
			get
			{
				return this._借出信息;
			}
			set
			{
				if ((this._借出信息 != value))
				{
					this.On借出信息Changing(value);
					this.SendPropertyChanging();
					this._借出信息 = value;
					this.SendPropertyChanged("借出信息");
					this.On借出信息Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_Device", Storage="_Warehouse", ThisKey="所属仓库", OtherKey="仓库名", IsForeignKey=true, DeleteRule="SET DEFAULT")]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.Device.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.Device.Add(this);
						this._所属仓库 = value.仓库名;
					}
					else
					{
						this._所属仓库 = default(string);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GodownEntry")]
	public partial class GodownEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _资产名称;
		
		private string _入库库名;
		
		private System.Nullable<System.DateTime> _入库时间;
		
		private System.Nullable<byte> _质检状态;
		
		private System.Nullable<int> _入库数量;
		
		private string _是否耗材;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On资产名称Changing(string value);
    partial void On资产名称Changed();
    partial void On入库库名Changing(string value);
    partial void On入库库名Changed();
    partial void On入库时间Changing(System.Nullable<System.DateTime> value);
    partial void On入库时间Changed();
    partial void On质检状态Changing(System.Nullable<byte> value);
    partial void On质检状态Changed();
    partial void On入库数量Changing(System.Nullable<int> value);
    partial void On入库数量Changed();
    partial void On是否耗材Changing(string value);
    partial void On是否耗材Changed();
    #endregion
		
		public GodownEntry()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_资产名称", DbType="VarChar(255)")]
		public string 资产名称
		{
			get
			{
				return this._资产名称;
			}
			set
			{
				if ((this._资产名称 != value))
				{
					this.On资产名称Changing(value);
					this.SendPropertyChanging();
					this._资产名称 = value;
					this.SendPropertyChanged("资产名称");
					this.On资产名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_入库库名", DbType="VarChar(255)")]
		public string 入库库名
		{
			get
			{
				return this._入库库名;
			}
			set
			{
				if ((this._入库库名 != value))
				{
					this.On入库库名Changing(value);
					this.SendPropertyChanging();
					this._入库库名 = value;
					this.SendPropertyChanged("入库库名");
					this.On入库库名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_入库时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 入库时间
		{
			get
			{
				return this._入库时间;
			}
			set
			{
				if ((this._入库时间 != value))
				{
					this.On入库时间Changing(value);
					this.SendPropertyChanging();
					this._入库时间 = value;
					this.SendPropertyChanged("入库时间");
					this.On入库时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_质检状态", DbType="TinyInt")]
		public System.Nullable<byte> 质检状态
		{
			get
			{
				return this._质检状态;
			}
			set
			{
				if ((this._质检状态 != value))
				{
					this.On质检状态Changing(value);
					this.SendPropertyChanging();
					this._质检状态 = value;
					this.SendPropertyChanged("质检状态");
					this.On质检状态Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_入库数量", DbType="Int")]
		public System.Nullable<int> 入库数量
		{
			get
			{
				return this._入库数量;
			}
			set
			{
				if ((this._入库数量 != value))
				{
					this.On入库数量Changing(value);
					this.SendPropertyChanging();
					this._入库数量 = value;
					this.SendPropertyChanged("入库数量");
					this.On入库数量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否耗材", DbType="VarChar(255)")]
		public string 是否耗材
		{
			get
			{
				return this._是否耗材;
			}
			set
			{
				if ((this._是否耗材 != value))
				{
					this.On是否耗材Changing(value);
					this.SendPropertyChanging();
					this._是否耗材 = value;
					this.SendPropertyChanged("是否耗材");
					this.On是否耗材Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requirement")]
	public partial class Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _需求内容;
		
		private System.Nullable<int> _需求数量;
		
		private string _供货商;
		
		private string _需求部门;
		
		private string _是否耗材;
		
		private System.Nullable<byte> _订单生成;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On需求内容Changing(string value);
    partial void On需求内容Changed();
    partial void On需求数量Changing(System.Nullable<int> value);
    partial void On需求数量Changed();
    partial void On供货商Changing(string value);
    partial void On供货商Changed();
    partial void On需求部门Changing(string value);
    partial void On需求部门Changed();
    partial void On是否耗材Changing(string value);
    partial void On是否耗材Changed();
    partial void On订单生成Changing(System.Nullable<byte> value);
    partial void On订单生成Changed();
    #endregion
		
		public Requirement()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求内容", DbType="VarChar(255)")]
		public string 需求内容
		{
			get
			{
				return this._需求内容;
			}
			set
			{
				if ((this._需求内容 != value))
				{
					this.On需求内容Changing(value);
					this.SendPropertyChanging();
					this._需求内容 = value;
					this.SendPropertyChanged("需求内容");
					this.On需求内容Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求数量", DbType="Int")]
		public System.Nullable<int> 需求数量
		{
			get
			{
				return this._需求数量;
			}
			set
			{
				if ((this._需求数量 != value))
				{
					this.On需求数量Changing(value);
					this.SendPropertyChanging();
					this._需求数量 = value;
					this.SendPropertyChanged("需求数量");
					this.On需求数量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this.On供货商Changing(value);
					this.SendPropertyChanging();
					this._供货商 = value;
					this.SendPropertyChanged("供货商");
					this.On供货商Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求部门", DbType="VarChar(255)")]
		public string 需求部门
		{
			get
			{
				return this._需求部门;
			}
			set
			{
				if ((this._需求部门 != value))
				{
					this.On需求部门Changing(value);
					this.SendPropertyChanging();
					this._需求部门 = value;
					this.SendPropertyChanged("需求部门");
					this.On需求部门Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否耗材", DbType="VarChar(255)")]
		public string 是否耗材
		{
			get
			{
				return this._是否耗材;
			}
			set
			{
				if ((this._是否耗材 != value))
				{
					this.On是否耗材Changing(value);
					this.SendPropertyChanging();
					this._是否耗材 = value;
					this.SendPropertyChanged("是否耗材");
					this.On是否耗材Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_订单生成", DbType="TinyInt")]
		public System.Nullable<byte> 订单生成
		{
			get
			{
				return this._订单生成;
			}
			set
			{
				if ((this._订单生成 != value))
				{
					this.On订单生成Changing(value);
					this.SendPropertyChanging();
					this._订单生成 = value;
					this.SendPropertyChanged("订单生成");
					this.On订单生成Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _角色名;
		
		private string _角色描述;
		
		private EntitySet<Role2Auth> _Role2Auth;
		
		private EntitySet<User2Role> _User2Role;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On角色名Changing(string value);
    partial void On角色名Changed();
    partial void On角色描述Changing(string value);
    partial void On角色描述Changed();
    #endregion
		
		public Role()
		{
			this._Role2Auth = new EntitySet<Role2Auth>(new Action<Role2Auth>(this.attach_Role2Auth), new Action<Role2Auth>(this.detach_Role2Auth));
			this._User2Role = new EntitySet<User2Role>(new Action<User2Role>(this.attach_User2Role), new Action<User2Role>(this.detach_User2Role));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_角色名", DbType="VarChar(255)")]
		public string 角色名
		{
			get
			{
				return this._角色名;
			}
			set
			{
				if ((this._角色名 != value))
				{
					this.On角色名Changing(value);
					this.SendPropertyChanging();
					this._角色名 = value;
					this.SendPropertyChanged("角色名");
					this.On角色名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_角色描述", DbType="VarChar(255)")]
		public string 角色描述
		{
			get
			{
				return this._角色描述;
			}
			set
			{
				if ((this._角色描述 != value))
				{
					this.On角色描述Changing(value);
					this.SendPropertyChanging();
					this._角色描述 = value;
					this.SendPropertyChanged("角色描述");
					this.On角色描述Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role2Auth", Storage="_Role2Auth", ThisKey="ID", OtherKey="roleid")]
		public EntitySet<Role2Auth> Role2Auth
		{
			get
			{
				return this._Role2Auth;
			}
			set
			{
				this._Role2Auth.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User2Role", Storage="_User2Role", ThisKey="ID", OtherKey="roleid")]
		public EntitySet<User2Role> User2Role
		{
			get
			{
				return this._User2Role;
			}
			set
			{
				this._User2Role.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Role2Auth(Role2Auth entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Role2Auth(Role2Auth entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_User2Role(User2Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_User2Role(User2Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role2Auth")]
	public partial class Role2Auth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _roleid;
		
		private System.Nullable<int> _authid;
		
		private EntityRef<Authority> _Authority;
		
		private EntityRef<Role> _Role;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroleidChanging(System.Nullable<int> value);
    partial void OnroleidChanged();
    partial void OnauthidChanging(System.Nullable<int> value);
    partial void OnauthidChanged();
    #endregion
		
		public Role2Auth()
		{
			this._Authority = default(EntityRef<Authority>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleid", DbType="Int")]
		public System.Nullable<int> roleid
		{
			get
			{
				return this._roleid;
			}
			set
			{
				if ((this._roleid != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleidChanging(value);
					this.SendPropertyChanging();
					this._roleid = value;
					this.SendPropertyChanged("roleid");
					this.OnroleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authid", DbType="Int")]
		public System.Nullable<int> authid
		{
			get
			{
				return this._authid;
			}
			set
			{
				if ((this._authid != value))
				{
					if (this._Authority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthidChanging(value);
					this.SendPropertyChanging();
					this._authid = value;
					this.SendPropertyChanged("authid");
					this.OnauthidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authority_Role2Auth", Storage="_Authority", ThisKey="authid", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Authority Authority
		{
			get
			{
				return this._Authority.Entity;
			}
			set
			{
				Authority previousValue = this._Authority.Entity;
				if (((previousValue != value) 
							|| (this._Authority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Authority.Entity = null;
						previousValue.Role2Auth.Remove(this);
					}
					this._Authority.Entity = value;
					if ((value != null))
					{
						value.Role2Auth.Add(this);
						this._authid = value.ID;
					}
					else
					{
						this._authid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Authority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role2Auth", Storage="_Role", ThisKey="roleid", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Role2Auth.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Role2Auth.Add(this);
						this._roleid = value.ID;
					}
					else
					{
						this._roleid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _供货商;
		
		private string _联系方式;
		
		private string _地址;
		
		private string _详细信息;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void On供货商Changing(string value);
    partial void On供货商Changed();
    partial void On联系方式Changing(string value);
    partial void On联系方式Changed();
    partial void On地址Changing(string value);
    partial void On地址Changed();
    partial void On详细信息Changing(string value);
    partial void On详细信息Changed();
    #endregion
		
		public Supplier()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this.On供货商Changing(value);
					this.SendPropertyChanging();
					this._供货商 = value;
					this.SendPropertyChanged("供货商");
					this.On供货商Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_联系方式", DbType="VarChar(255)")]
		public string 联系方式
		{
			get
			{
				return this._联系方式;
			}
			set
			{
				if ((this._联系方式 != value))
				{
					this.On联系方式Changing(value);
					this.SendPropertyChanging();
					this._联系方式 = value;
					this.SendPropertyChanged("联系方式");
					this.On联系方式Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="VarChar(255)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this.On地址Changing(value);
					this.SendPropertyChanging();
					this._地址 = value;
					this.SendPropertyChanged("地址");
					this.On地址Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_详细信息", DbType="VarChar(MAX)")]
		public string 详细信息
		{
			get
			{
				return this._详细信息;
			}
			set
			{
				if ((this._详细信息 != value))
				{
					this.On详细信息Changing(value);
					this.SendPropertyChanging();
					this._详细信息 = value;
					this.SendPropertyChanged("详细信息");
					this.On详细信息Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User2Role")]
	public partial class User2Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _userid;
		
		private System.Nullable<int> _roleid;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Admin> _Admin;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuseridChanging(System.Nullable<int> value);
    partial void OnuseridChanged();
    partial void OnroleidChanging(System.Nullable<int> value);
    partial void OnroleidChanged();
    #endregion
		
		public User2Role()
		{
			this._Role = default(EntityRef<Role>);
			this._Admin = default(EntityRef<Admin>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="Int")]
		public System.Nullable<int> userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					if (this._Admin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleid", DbType="Int")]
		public System.Nullable<int> roleid
		{
			get
			{
				return this._roleid;
			}
			set
			{
				if ((this._roleid != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleidChanging(value);
					this.SendPropertyChanging();
					this._roleid = value;
					this.SendPropertyChanged("roleid");
					this.OnroleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User2Role", Storage="_Role", ThisKey="roleid", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.User2Role.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.User2Role.Add(this);
						this._roleid = value.ID;
					}
					else
					{
						this._roleid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Admin_User2Role", Storage="_Admin", ThisKey="userid", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Admin Admin
		{
			get
			{
				return this._Admin.Entity;
			}
			set
			{
				Admin previousValue = this._Admin.Entity;
				if (((previousValue != value) 
							|| (this._Admin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Admin.Entity = null;
						previousValue.User2Role.Remove(this);
					}
					this._Admin.Entity = value;
					if ((value != null))
					{
						value.User2Role.Add(this);
						this._userid = value.ID;
					}
					else
					{
						this._userid = default(Nullable<int>);
					}
					this.SendPropertyChanged("Admin");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contract")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _合同名;
		
		private string _交易资产;
		
		private string _详细信息;
		
		private string _供货商;
		
		private string _生效时间;
		
		private string _终止时间;
		
		private string _审核状态;
		
		private string _是否耗材;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On合同名Changing(string value);
    partial void On合同名Changed();
    partial void On交易资产Changing(string value);
    partial void On交易资产Changed();
    partial void On详细信息Changing(string value);
    partial void On详细信息Changed();
    partial void On供货商Changing(string value);
    partial void On供货商Changed();
    partial void On生效时间Changing(string value);
    partial void On生效时间Changed();
    partial void On终止时间Changing(string value);
    partial void On终止时间Changed();
    partial void On审核状态Changing(string value);
    partial void On审核状态Changed();
    partial void On是否耗材Changing(string value);
    partial void On是否耗材Changed();
    #endregion
		
		public Contract()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_合同名", DbType="VarChar(255)")]
		public string 合同名
		{
			get
			{
				return this._合同名;
			}
			set
			{
				if ((this._合同名 != value))
				{
					this.On合同名Changing(value);
					this.SendPropertyChanging();
					this._合同名 = value;
					this.SendPropertyChanged("合同名");
					this.On合同名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_交易资产", DbType="VarChar(255)")]
		public string 交易资产
		{
			get
			{
				return this._交易资产;
			}
			set
			{
				if ((this._交易资产 != value))
				{
					this.On交易资产Changing(value);
					this.SendPropertyChanging();
					this._交易资产 = value;
					this.SendPropertyChanged("交易资产");
					this.On交易资产Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_详细信息", DbType="VarChar(MAX)")]
		public string 详细信息
		{
			get
			{
				return this._详细信息;
			}
			set
			{
				if ((this._详细信息 != value))
				{
					this.On详细信息Changing(value);
					this.SendPropertyChanging();
					this._详细信息 = value;
					this.SendPropertyChanged("详细信息");
					this.On详细信息Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this.On供货商Changing(value);
					this.SendPropertyChanging();
					this._供货商 = value;
					this.SendPropertyChanged("供货商");
					this.On供货商Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_生效时间", DbType="VarChar(255)")]
		public string 生效时间
		{
			get
			{
				return this._生效时间;
			}
			set
			{
				if ((this._生效时间 != value))
				{
					this.On生效时间Changing(value);
					this.SendPropertyChanging();
					this._生效时间 = value;
					this.SendPropertyChanged("生效时间");
					this.On生效时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_终止时间", DbType="VarChar(255)")]
		public string 终止时间
		{
			get
			{
				return this._终止时间;
			}
			set
			{
				if ((this._终止时间 != value))
				{
					this.On终止时间Changing(value);
					this.SendPropertyChanging();
					this._终止时间 = value;
					this.SendPropertyChanged("终止时间");
					this.On终止时间Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_审核状态", DbType="VarChar(255)")]
		public string 审核状态
		{
			get
			{
				return this._审核状态;
			}
			set
			{
				if ((this._审核状态 != value))
				{
					this.On审核状态Changing(value);
					this.SendPropertyChanging();
					this._审核状态 = value;
					this.SendPropertyChanged("审核状态");
					this.On审核状态Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_是否耗材", DbType="VarChar(255)")]
		public string 是否耗材
		{
			get
			{
				return this._是否耗材;
			}
			set
			{
				if ((this._是否耗材 != value))
				{
					this.On是否耗材Changing(value);
					this.SendPropertyChanging();
					this._是否耗材 = value;
					this.SendPropertyChanged("是否耗材");
					this.On是否耗材Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SetOrder")]
	public partial class SetOrder
	{
		
		private string _需求资产;
		
		private System.Nullable<int> _需求数量;
		
		private string _供货商;
		
		public SetOrder()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求资产", DbType="VarChar(255)")]
		public string 需求资产
		{
			get
			{
				return this._需求资产;
			}
			set
			{
				if ((this._需求资产 != value))
				{
					this._需求资产 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求数量", DbType="Int")]
		public System.Nullable<int> 需求数量
		{
			get
			{
				return this._需求数量;
			}
			set
			{
				if ((this._需求数量 != value))
				{
					this._需求数量 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this._供货商 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _资产名称;
		
		private System.Nullable<int> _需求数量;
		
		private string _供货商;
		
		private System.Nullable<System.DateTime> _提交时间;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On资产名称Changing(string value);
    partial void On资产名称Changed();
    partial void On需求数量Changing(System.Nullable<int> value);
    partial void On需求数量Changed();
    partial void On供货商Changing(string value);
    partial void On供货商Changed();
    partial void On提交时间Changing(System.Nullable<System.DateTime> value);
    partial void On提交时间Changed();
    #endregion
		
		public Order()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_资产名称", DbType="VarChar(255)")]
		public string 资产名称
		{
			get
			{
				return this._资产名称;
			}
			set
			{
				if ((this._资产名称 != value))
				{
					this.On资产名称Changing(value);
					this.SendPropertyChanging();
					this._资产名称 = value;
					this.SendPropertyChanged("资产名称");
					this.On资产名称Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_需求数量", DbType="Int")]
		public System.Nullable<int> 需求数量
		{
			get
			{
				return this._需求数量;
			}
			set
			{
				if ((this._需求数量 != value))
				{
					this.On需求数量Changing(value);
					this.SendPropertyChanging();
					this._需求数量 = value;
					this.SendPropertyChanged("需求数量");
					this.On需求数量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this.On供货商Changing(value);
					this.SendPropertyChanging();
					this._供货商 = value;
					this.SendPropertyChanged("供货商");
					this.On供货商Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提交时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 提交时间
		{
			get
			{
				return this._提交时间;
			}
			set
			{
				if ((this._提交时间 != value))
				{
					this.On提交时间Changing(value);
					this.SendPropertyChanging();
					this._提交时间 = value;
					this.SendPropertyChanged("提交时间");
					this.On提交时间Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderCount")]
	public partial class OrderCount
	{
		
		private string _订购资产;
		
		private string _供货商;
		
		private System.Nullable<int> _总量;
		
		public OrderCount()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_订购资产", DbType="VarChar(255)")]
		public string 订购资产
		{
			get
			{
				return this._订购资产;
			}
			set
			{
				if ((this._订购资产 != value))
				{
					this._订购资产 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_供货商", DbType="VarChar(255)")]
		public string 供货商
		{
			get
			{
				return this._供货商;
			}
			set
			{
				if ((this._供货商 != value))
				{
					this._供货商 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总量", DbType="Int")]
		public System.Nullable<int> 总量
		{
			get
			{
				return this._总量;
			}
			set
			{
				if ((this._总量 != value))
				{
					this._总量 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GodownEntryCount")]
	public partial class GodownEntryCount
	{
		
		private string _资产;
		
		private string _库;
		
		private System.Nullable<int> _总量;
		
		public GodownEntryCount()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_资产", DbType="VarChar(255)")]
		public string 资产
		{
			get
			{
				return this._资产;
			}
			set
			{
				if ((this._资产 != value))
				{
					this._资产 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_库", DbType="VarChar(255)")]
		public string 库
		{
			get
			{
				return this._库;
			}
			set
			{
				if ((this._库 != value))
				{
					this._库 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_总量", DbType="Int")]
		public System.Nullable<int> 总量
		{
			get
			{
				return this._总量;
			}
			set
			{
				if ((this._总量 != value))
				{
					this._总量 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bulletin")]
	public partial class Bulletin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _消息种类;
		
		private string _详细信息;
		
		private System.Nullable<System.DateTime> _发生时间;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void On消息种类Changing(string value);
    partial void On消息种类Changed();
    partial void On详细信息Changing(string value);
    partial void On详细信息Changed();
    partial void On发生时间Changing(System.Nullable<System.DateTime> value);
    partial void On发生时间Changed();
    #endregion
		
		public Bulletin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_消息种类", DbType="VarChar(255)")]
		public string 消息种类
		{
			get
			{
				return this._消息种类;
			}
			set
			{
				if ((this._消息种类 != value))
				{
					this.On消息种类Changing(value);
					this.SendPropertyChanging();
					this._消息种类 = value;
					this.SendPropertyChanged("消息种类");
					this.On消息种类Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_详细信息", DbType="VarChar(MAX)")]
		public string 详细信息
		{
			get
			{
				return this._详细信息;
			}
			set
			{
				if ((this._详细信息 != value))
				{
					this.On详细信息Changing(value);
					this.SendPropertyChanging();
					this._详细信息 = value;
					this.SendPropertyChanged("详细信息");
					this.On详细信息Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_发生时间", DbType="DateTime")]
		public System.Nullable<System.DateTime> 发生时间
		{
			get
			{
				return this._发生时间;
			}
			set
			{
				if ((this._发生时间 != value))
				{
					this.On发生时间Changing(value);
					this.SendPropertyChanging();
					this._发生时间 = value;
					this.SendPropertyChanged("发生时间");
					this.On发生时间Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
